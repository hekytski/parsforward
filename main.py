import re
import os
import nest_asyncio
import asyncio
import time
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import InputMediaPhoto
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread.utils import ValueRenderOption

nest_asyncio.apply()

# Telegram API
api_id = 23666805
api_hash = "03adb57619a5ed7c7cace0a4a8947d04"

# –°–µ—Å—Å–∏—è
os.makedirs("sessions", exist_ok=True)
session_path = os.path.abspath("sessions/parsiv_forwarder")
app = Client(session_path, api_id=api_id, api_hash=api_hash)

# Google Sheets
doc_name = "–í–ï–°–ï–ù–ù–ò–ô –ü–†–ò–ó–´–í 2025"
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
gs_client = gspread.authorize(creds)

spreadsheet = gs_client.open(doc_name)
sheet_ugresh = spreadsheet.worksheet("–†–æ–∑—ã—Å–∫ —Ñ–∞–º")
sheet_pep = spreadsheet.worksheet("–†–æ–∑—ã—Å–∫ –ï–ü–ü —Ñ–∞–º")
log_sheet = spreadsheet.worksheet("–õ–û–ì")

# üßæ –°–ø–∏—Å–æ–∫ user_id –ø–æ —Ä–∞–π–æ–Ω—É
region_to_user_ids = {
    "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π –∑–∞—Ç–æ–Ω": [1063427278],
    "–û—Ä–µ—Ö–æ–≤–æ-–ë–æ—Ä–∏—Å–æ–≤–æ-–Æ–∂–Ω–æ–µ": [5169314683],
    "–î–æ–Ω—Å–∫–æ–π": [416354641],
    "–ë—Ä–∞—Ç–µ–µ–≤–æ": [1602344399],
    "–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ-–Æ–∂–Ω–æ–µ": [212701167],
    "–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ-–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ": [5292457876],
    "–ú–æ—Å–∫–≤–æ—Ä–µ—á—å–µ-–°–∞–±—É—Ä–æ–≤–æ": [1186911400],
    "–ù–∞–≥–∞—Ç–∏–Ω–æ-–°–∞–¥–æ–≤–Ω–∏–∫–∏": [1483860553],
    "–ó—è–±–ª–∏–∫–æ–≤–æ": [908765228],
    "–û—Ä–µ—Ö–æ–≤–æ-–ë–æ—Ä–∏—Å–æ–≤–æ-–°–µ–≤–µ—Ä–Ω–æ–µ": [5297001151],
    "–ë–∏—Ä—é–ª–µ–≤–æ-–í–æ—Å—Ç–æ—á–Ω–æ–µ": [5236483739],
    "–ù–∞–≥–æ—Ä–Ω—ã–π": [1565990655, 343441896],
    "–ë–∏—Ä—é–ª–µ–≤–æ-–ó–∞–ø–∞–¥–Ω–æ–µ": [278637133],
    "–î–∞–Ω–∏–ª–æ–≤—Å–∫–∏–π": [236008528],
    "–¶–∞—Ä–∏—Ü—ã–Ω–æ": [5692734299],
    "–ß–µ—Ä—Ç–∞–Ω–æ–≤–æ-–°–µ–≤–µ—Ä–Ω–æ–µ": [423475579]
}

def extract_fio_dob(text):
    match = re.search(r"([–ê-–Ø–∞-—è–Å—ëA-Za-z]+ [–ê-–Ø–∞-—è–Å—ëA-Za-z]+ [–ê-–Ø–∞-—è–Å—ëA-Za-z]+) (\d{2}\.\d{2}\.\d{4})", text)
    return (match.group(1).strip(), match.group(2).strip()) if match else (None, None)

def extract_camera_address(text):
    match = re.search(r"–ö–∞–º–µ—Ä–∞: .*?\| (.+)", text)
    return match.group(1).strip() if match else ""

def normalize_address(address):
    address = re.sub(r'[^\w\s]', ' ', address)
    address = re.sub(r'\s+', ' ', address).strip().lower()
    return address

def soft_address_match(addr1, addr2, threshold=0.6):
    tokens1 = set(normalize_address(addr1).split())
    tokens2 = set(normalize_address(addr2).split())
    if not tokens1 or not tokens2:
        return False
    return len(tokens1 & tokens2) / min(len(tokens1), len(tokens2)) >= threshold

def get_hits(sheet, col_index, value):
    return sum(1 for v in sheet.col_values(col_index) if v.strip() == value.strip())

def find_region(fio, sheet_name, fio_col, region_col):
    sheet = spreadsheet.worksheet(sheet_name)
    all_rows = sheet.get_all_values()
    for idx, row in enumerate(all_rows[1:], start=2):
        if len(row) > max(fio_col, region_col) and row[fio_col].strip().lower() == fio.lower():
            return row[region_col].strip(), row, idx
    return None, None, None

@app.on_message((filters.text | filters.caption) & filters.user([1953996829, 264271992]))
async def handle_parsiv_message(client, message):
    raw_text = message.text or message.caption or ""
    if not raw_text.strip():
        print("‚ùó –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    fio, dob = extract_fio_dob(raw_text)
    camera_address = extract_camera_address(raw_text)
    now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    link_to_case = ""

    if not fio or not dob:
        print("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –§–ò–û –∏–ª–∏ –î–†")
        return

    text_lower = raw_text.lower()
    region = None
    registration_address = ""
    full_row = None
    row_index = None

    if "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–≥—Ä–µ—à" in text_lower:
        region, full_row, row_index = find_region(fio, "–†–æ–∑—ã—Å–∫ —Ñ–∞–º", 1, 3)
        sheet = sheet_ugresh
        if full_row and row_index:
            registration_address = full_row[5] if len(full_row) > 5 else ""
            cell_j = sheet.cell(row_index, 10, value_render_option=ValueRenderOption.formula).value
            match = re.search(r'"(https?://[^"]+)"', cell_j)
            if match:
                link_to_case = f"\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {match.group(1)}"

    elif "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ–ø" in text_lower:
        region, full_row, row_index = find_region(fio, "–†–æ–∑—ã—Å–∫ –ï–ü–ü —Ñ–∞–º", 0, 11)
        sheet = sheet_pep
        if full_row and row_index:
            registration_address = full_row[9] if len(full_row) > 9 else ""
            cell_j = sheet.cell(row_index, 10, value_render_option=ValueRenderOption.formula).value
            match = re.search(r'"(https?://[^"]+)"', cell_j)
            if match:
                link_to_case = f"\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {match.group(1)}"
    else:
        print("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return

    if not region:
        print(f"‚ùó –†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: {fio}")
        return

    user_ids = region_to_user_ids.get(region, [])
    if not user_ids:
        print(f"‚ùó –†–∞–π–æ–Ω '{region}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ user_id")
        return

    fio_hits = get_hits(log_sheet, 1, fio)
    address_hits = get_hits(log_sheet, 5, camera_address)

    address_match_note = ""
    is_address_match = camera_address and registration_address and soft_address_match(camera_address, registration_address)
    if is_address_match:
        address_match_note = (
            f"\n‚úÖ –ê–î–†–ï–° –°–†–ê–ë–û–¢–ö–ò –°–û–í–ü–ê–î–ê–ï–¢ –° –ê–î–†–ï–°–û–ú –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò"
            f"\n–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_address}"
        )

    details_message = (
        f"# –°—Ä–∞–±–æ—Ç–æ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É: {fio_hits + 1}\n"
        f"# –°—Ä–∞–±–æ—Ç–æ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É: {address_hits + 1}"
        f"{link_to_case}{address_match_note}"
    )

    try:
        if message.media_group_id:
            group_msgs = await client.get_media_group(chat_id=message.chat.id, message_id=message.id)
            media_group = []
            for i, msg in enumerate(group_msgs):
                if msg.photo:
                    media_group.append(InputMediaPhoto(
                        media=msg.photo.file_id,
                        caption=raw_text if i == 0 else None
                    ))
        else:
            media_group = None

        for uid in user_ids:
            try:
                if media_group:
                    await client.send_media_group(uid, media=media_group)
                    time.sleep(1.5)
                else:
                    await client.copy_message(uid, message.chat.id, message.id)
                    time.sleep(1.5)

                await client.send_message(uid, details_message)
                print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ: {fio} ‚Üí {region} ‚Üí {uid}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –Ω–∞ {uid}: {e}")
                if "PEER_ID_INVALID" in str(e):
                    print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —á–∞—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                elif "FLOOD_WAIT" in str(e):
                    print("‚è≥ Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å. –ü–∞—É–∑–∞ 2 —Å–µ–∫.")
                    time.sleep(2)
                try:
                    await client.send_message("me", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ:\n{e}\n\n{raw_text}"[:4000])
                except Exception as inner_e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {inner_e}")

    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{e}")

    try:
        log_sheet.append_row([
            fio, dob, region, now, camera_address,
            registration_address, fio_hits + 1, address_hits + 1,
            "–î–ê" if is_address_match else ""
        ])
        print("üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

# üöÄ –ó–∞–ø—É—Å–∫
async def start_bot():
    try:
        await app.stop()
    except:
        pass
    await app.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await asyncio.Event().wait()

await start_bot()
